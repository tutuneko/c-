#include<iostream>
using namespace std;
//2025年1月20日 18:07:35
int main() {
	//1.const修饰指针---常量指针
	int a = 10;
	const int* p = &a;//指向可以变，值不能
	cout << "p的地址：\t" << p << endl << "p的数据：\t" << *p << endl;
	//p = (int*)114514;//更改了指向，引发野指针了
	int b;//在调试模式下，编译器可能会将未初始化的局部变量初始化为 0CCCCCCC（十进制 -858993460）
	p = &b;
	//*p = 1;报错“表达式必须是可修改的左值”
	
	cout << "p的地址: \t" << p << endl << "p的数据: \t" << *p << endl;
	cout << endl;

	//2.const修饰常量---指针常量
	int* const p1 = &a;//指向不可以变，值能
	cout << "p1的地址: \t" << p1 << endl << "p1的数据: \t" << *p1 << endl;
	//p1 = &b;报错“表达式必须是可修改的左值”
	*p1 = 114514;
	cout << "p1的地址: \t" << p1 << endl << "p1的数据: \t" << *p1 << endl;
	cout << endl;
	//3.const即修饰指针，又修饰常量
	const int* const p2 = &a;//指向不可以变，值也不能
	cout << "p2的地址: \t" << p2 << endl << "p2的数据: \t" << *p2 << endl;
	//*p2 = 114514;报错“表达式必须是可修改的左值”
	//p2 = &b;报错“表达式必须是可修改的左值”
	cout << "p2的地址: \t" << p2 << endl << "p2的数据: \t" << *p2 << endl;
	cout << endl;


	system("pause");
	return 0;
}
/*
界面――――――――――――――
p的地址：       0000001D2CB7FA54
p的数据：       10
p的地址:        0000001D2CB7FA94
p的数据:        -858993460

p1的地址:       0000001D2CB7FA54
p1的数据:       10
p1的地址:       0000001D2CB7FA54
p1的数据:       114514

p2的地址:       0000001D2CB7FA54
p2的数据:       114514
p2的地址:       0000001D2CB7FA54
p2的数据:       114514

请按任意键继续. . .
功能――――――――――――――
1.const修饰指针---常量指针
2.const修饰常量---指针常量
3.const即修饰指针，又修饰常量
总结――――――――――――――
1.const修饰指针---常量指针：指向的地址不能变，但指向的值可以变。
2.const修饰常量---指针常量：指向的地址不能变，指向的值也不能变。
3.const即修饰指针，又修饰常量：指向的地址不能变，指向的值也不能变。

*/